<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[重剑无锋，大巧不工。]]></title>
  <link href="https://fuckall.github.io/atom.xml" rel="self"/>
  <link href="https://fuckall.github.io/"/>
  <updated>2016-08-23T13:50:24+08:00</updated>
  <id>https://fuckall.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Let's Encrypt 获取Nginx证书]]></title>
    <link href="https://fuckall.github.io/14719253380529.html"/>
    <updated>2016-08-23T12:08:58+08:00</updated>
    <id>https://fuckall.github.io/14719253380529.html</id>
    <content type="html"><![CDATA[
<p>Let&#39;s Encrypt作为一个公益项目，给我们带来最大的好处就是能够免费的获取证书，而且申请过程简单，证书有效时间为90天，建议60天的时候主动更新证书。</p>

<hr/>

<h2 id="toc_0">流程以及结果：</h2>

<ol>
<li>安装let&#39;s encrypt 客户端</li>
<li>多个证书申请</li>
<li>定期更新证书</li>
</ol>

<h2 id="toc_1">准备：</h2>

<ol>
<li>首先要有一台nginx服务器</li>
<li>有域名的控制权，也就是可以解析到nginx服务器上</li>
<li>这里使用的是CentOS 7</li>
</ol>

<h2 id="toc_2">流程开始：</h2>

<ol>
<li><p>安装必要的软件</p>

<pre><code> sudo yum -y install git bc
</code></pre></li>
<li><p>安装let&#39;s encrypt 客户端</p>

<pre><code class="language-bash">  $sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
</code></pre></li>
<li><p>获取证书</p>

<ol>
<li><p>修该nginx 配置文件,在Nginx的/etc/nginx/conf.d/default.conf文件中添加如下的内容。</p>

<pre><code class="language-bash">$ location ~ /.well-known {
allow all;
}
 ```
</code></pre></li>
<li><p>重启nginx</p>

<pre><code class="language-bash">$ sudo systemctl restart nginx
</code></pre></li>
<li><p>申请证书</p>

<pre><code class="language-bash">$ cd /opt/letsencrypt
$./letsencrypt-auto certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d www.example.com
</code></pre>

<p>这里的webroot，我用的是默认的，应为我的nginx是yum直接安装的，如果是自己编译的版本请指定，这样let&#39;s encrypt 才能够验证域名的绝对控制权，-d 后面的参数可以选择多个，但是这几个域名都要解析到本机的nginx上面。</p></li>
<li><p>填写邮箱地址</p>

<ol>
<li><p>注意：这里是let&#39;s encrypt 的客户端的ui界面，只要将你的邮箱地址填入即可，这个邮箱的作用是用来进行账号找回的，也可以下次重新的申请，但是如果要申请的话你要把所有的上面的程序走一遍，但是如果同样的账号，那么至于要一条命令重新的申请以下就好了，比较方便。<br/>
然后一路的同意，最后是输出信息，有Congratulations!等字眼，说明申请已经成功了，注意这时候的输出信息，这些信息中包括了你的证书在什么地方，证书过期证书等。</p></li>
<li><p>输出信息,例如:</p></li>
</ol>

<pre><code class="language-bash">IMPORTANT NOTES:
If you lose your account credentials, you can recover through
e-mails sent to sammy@digitalocean.com
Congratulations! Your certificate and chain have been saved at
/etc/letsencrypt/live/example.com/fullchain.pem. Your
cert will expire on 2016-03-15. To obtain a new version of the
certificate in the future, simply run Let&#39;s Encrypt again.
Your account credentials have been saved in your Let&#39;s Encrypt
configuration directory at /etc/letsencrypt. You should make a
secure backup of this folder now. This configuration directory will
also contain certificates and private keys obtained by Let&#39;s
Encrypt so making regular backups of this folder is ideal.
If like Let&#39;s Encrypt, please consider supporting our work by:

Donating to ISRG / Let&#39;s Encrypt:   https://letsencrypt.org/donate
Donating to EFF:                    https://eff.org/donate-len
</code></pre>

<ol>
<li><p>申请之后的产物</p>

<ul>
<li>cert.pem 这个就是域名的证书，Nginx 需要。</li>
<li>privkey.pem 这个是秘钥,Nginx 需要。</li>
<li>chain.pem 这信任let&#39;s encrypt 的证书。</li>
<li>fullchain.pem 这个是cert.pem 和 chain.pem证书的结合体。</li>
<li>chain.pem 这是是一个let&#39;s Encrypt 用来找回证书的一个标志文件</li>
</ul></li>
</ol></li>
</ol></li>
<li><p>Nginx 配置使用证书：</p>

<p>在对应的域名的配置文件中加入：</p>

<pre><code>listen 443 ssl;
server_name example.com www.example.com;
ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
</code></pre></li>
<li><p>重启nginx，并且https请求。</p></li>
<li><p>定时任务，每周进行一次证书的申请以及重启nginx</p>

<pre><code> $sudo crontab -e
</code></pre>

<p>添加如下定时任务： </p>

<pre><code>  30 2 * * 1 /opt/letsencrypt/letsencrypt-auto renew &gt;&gt; /var/log/le-renew.log
  35 2 * * 1 /usr/bin/systemctl reload nginx
</code></pre></li>
</ol>

<h2 id="toc_3">总结:以上步骤很简单，并且很好用，如果以后需要升级let&#39;s encrypt客户端软件，直接git pull即可，非常方便。</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Registry]]></title>
    <link href="https://fuckall.github.io/14719166233226.html"/>
    <updated>2016-08-23T09:43:43+08:00</updated>
    <id>https://fuckall.github.io/14719166233226.html</id>
    <content type="html"><![CDATA[
<ol>
<li>安全问题：能够在不泄露公司代码的情况下，存储镜像</li>
<li>可用性： 不依赖其他的第三方的docker仓库</li>
<li>Ci： 公司部署方式的改变，Docker Registry成为不可或缺的一部分。</li>
</ol>

<h2 id="toc_0">搭建准备：</h2>

<ol>
<li>镜像：registry:2</li>
<li>镜像存储的目录：例如：/DockerRegistry/</li>
<li>证书,安全证书</li>
</ol>

<h2 id="toc_1">搭建过程：</h2>

<ol>
<li>首先拉取Docker Registry镜像(由于国内墙的问题,使用DaoCloud镜像)<br/></li>
</ol>

<pre><code>docker pull daocloud.io/library/registry:2.4.1
</code></pre>

<ol>
<li>创建镜像存储目录：</li>
</ol>

<pre><code>$mkdir /DockerRegistry/
</code></pre>

<ol>
<li>创建证书文件目录并且放入证书：</li>
</ol>

<pre><code>$mkdir /DockerRegistry/cert 
</code></pre>

<ol>
<li>创建Docker Registry登录密码：</li>
</ol>

<pre><code class="language-bash">$mkdir auth
$docker run --entrypoint htpasswd daocloud.io/library/registry:2.4.1  -Bbn testuser testpassword &gt; auth/htpasswd
</code></pre>

<ol>
<li>启动Registry (注意下面的证书都是要改为自己的证书)</li>
</ol>

<pre><code class="language-bash">$docker run -d -p 5000:5000 --restart=always --name registry \
  -v `pwd`/auth:/auth \
  -e &quot;REGISTRY_AUTH=htpasswd&quot; \
  -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  daocloud.io/library/registry:2.4.1
</code></pre>

<ol>
<li>添加一个可视化的界面 </li>
</ol>

<pre><code class="language-bash">$docker run \
  -d \
  -e ENV_DOCKER_REGISTRY_HOST=ENTER-YOUR-REGISTRY-HOST-HERE \
  -e ENV_DOCKER_REGISTRY_PORT=ENTER-PORT-TO-YOUR-REGISTRY-HOST-HERE \
  -e ENV_MODE_BROWSE_ONLY=false
  -p 8080:80 \
  konradkleine/docker-registry-frontend:v2
</code></pre>

<ol>
<li>nginx配置 (添加nginx配置)</li>
</ol>

<pre><code class="language-nginx.conf">$server {
    server_name dev;
    location / {
        proxy_pass http://x.x.x.x:8080;
        proxy_http_version 1.1;
        proxy_set_header Connection &quot;&quot;;
    }
}
</code></pre>

<h2 id="toc_2">总结：</h2>

<p>以上的步骤比较简单，已经满足大部分的需求，更加高端的需求可以定制registry的config.yaml文件。<br/>
起始可以在第六步的时候不必要映射端口到host，包括第七部也可以不用，因为相同在同一台机器上的docker是可以直接连接。</p>

]]></content>
  </entry>
  
</feed>
